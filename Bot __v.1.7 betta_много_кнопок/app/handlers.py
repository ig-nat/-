from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import ContentType, InputMediaPhoto, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
import app.keyboards as kb
from app.config import GROUP_ID, GROUP_ID_2, GROUP_ID_3
from aiogram.fsm.storage.base import StorageKey
import logging

router = Router()
logger = logging.getLogger(__name__)
storage = {}

class Reg(StatesGroup):
    adres = State()
    photo = State()
    photo2 = State()
    photo3 = State()
    final_photo = State()

class Moderator1State(StatesGroup):
    waiting_for_gid = State()
    waiting_for_reason = State()

class Moderator2State(StatesGroup):
    waiting_for_final_approval = State()
    waiting_for_reject_reason = State()

@router.message(CommandStart())
async def start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –ù–∞—á–Ω—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞.",
        reply_markup=kb.main
    )

@router.message(F.text == '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞')
async def start_registration(message: Message, state: FSMContext):
    await state.set_state(Reg.adres)
    await message.answer("üìç –í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å –ü–í–ó:", reply_markup=kb.cancel_kb)

@router.callback_query(F.data == '—É—Ä–∞ –º—ã –¥–æ—à–ª–∏ –¥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!')
async def start_reg(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Reg.adres)
    await callback.message.answer("üìç –í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å –ü–í–ó:", reply_markup=kb.cancel_kb)
    await callback.answer()

@router.message(Reg.adres)
async def save_adres(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùé –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)
        return

    await state.update_data(adres=message.text)
    await state.set_state(Reg.photo)
    await message.answer("‚úÖ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —ç–∫—Ä–∞–Ω–∞", reply_markup=kb.cancel_kb)

@router.message(Reg.photo)
async def save_photo1(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùé –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)
        return

    if message.content_type == ContentType.PHOTO:
        await state.update_data(photo=message.photo[-1].file_id)
        await state.set_state(Reg.photo2)
        await message.answer("üì∏ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å —Ñ–æ—Ç–æ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞", reply_markup=kb.cancel_kb)
    else:
        await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —ç–∫—Ä–∞–Ω–∞.")

@router.message(Reg.photo2)
async def save_photo2(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùé –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)
        return

    if message.content_type == ContentType.PHOTO:
        await state.update_data(photo2=message.photo[-1].file_id)
        await state.set_state(Reg.photo3)
        await message.answer("üì∏ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å —Ñ–æ—Ç–æ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞", reply_markup=kb.cancel_kb)
    else:
        await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞.")

@router.message(Reg.photo3)
async def save_photo3(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùé –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)
        return

    if message.content_type == ContentType.PHOTO:
        try:
            data = await state.get_data()
            photo = data.get('photo')
            photo2 = data.get('photo2')
            photo3 = message.photo[-1].file_id
            adres = data.get('adres')

            if None in (photo, photo2, photo3, adres):
                raise ValueError("–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")

            user_name = message.from_user.full_name

            await message.bot.send_message(
                GROUP_ID,
                f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user_name}\n–ê–¥—Ä–µ—Å: {adres}",
                reply_markup=ReplyKeyboardRemove()
            )

            media = [
                InputMediaPhoto(media=photo, caption=f"–§–æ—Ç–æ —ç–∫—Ä–∞–Ω–∞ –æ—Ç {user_name}"),
                InputMediaPhoto(media=photo2, caption=f"–°–µ—Ä–∏–π–Ω–∏–∫ –¢–í –æ—Ç {user_name}"),
                InputMediaPhoto(media=photo3, caption=f"–°–µ—Ä–∏–π–Ω–∏–∫ –ü–ö –æ—Ç {user_name}")
            ]

            sent_messages_group1 = await message.bot.send_media_group(GROUP_ID, media)
            group_message_id = sent_messages_group1[0].message_id

            button_message = await message.bot.send_message(
                GROUP_ID,
                f"–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É –æ—Ç {user_name}:",
                reply_markup=kb.moderator_full,
                reply_to_message_id=group_message_id
            )

            storage[group_message_id] = {
                "user_id": message.from_user.id,
                "button_message_id": button_message.message_id,
                "is_accepted": False,
                "media": media
            }

            await message.answer(
                "‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                reply_markup=ReplyKeyboardRemove()
            )
            await state.update_data(group_message_id=group_message_id)
            await state.set_state(Reg.final_photo)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", exc_info=True)
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=kb.main)
            await state.clear()
    else:
        await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.")

@router.callback_query(F.data == "cancel_registration")
async def cancel_registration(callback: CallbackQuery, state: FSMContext):
    try:
        group_message_id = callback.message.reply_to_message.message_id

        if group_message_id not in storage:
            raise KeyError("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        user_id = storage[group_message_id]["user_id"]
        await state.update_data(group_message_id=group_message_id, user_id=user_id)

        try:
            await callback.bot.delete_message(
                chat_id=GROUP_ID,
                message_id=storage[group_message_id]["button_message_id"]
            )
        except Exception as e:
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {str(e)}")

        await callback.message.answer("üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

@router.message(F.chat.id == GROUP_ID, Moderator1State.waiting_for_gid)
async def handle_gid(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        group_message_id = data.get("group_message_id")

        if not group_message_id:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")

        storage_data = storage.get(group_message_id)
        if not storage_data:
            raise KeyError("–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        media = storage_data.get("media")
        if media:
            sent_messages_group2 = await message.bot.send_media_group(GROUP_ID_2, media)
            await message.bot.send_message(
                chat_id=GROUP_ID_2,
                text=f"GiD: {message.text}",
                reply_to_message_id=sent_messages_group2[0].message_id
            )

        await message.bot.send_message(
            chat_id=GROUP_ID,
            text=f"GiD: {message.text}",
            reply_to_message_id=group_message_id
        )

        storage[group_message_id]["is_accepted"] = True
        user_id = storage[group_message_id]["user_id"]
        await message.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ.",
            reply_markup=kb.cancel_kb
        )

        await message.answer("‚úÖ GiD –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∫ –∏–Ω–∂–µ–Ω–µ—Ä–∞–º.")
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ GiD. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()

@router.message(F.chat.id == GROUP_ID)
async def handle_cancel_reason(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        group_message_id = data.get("group_message_id")
        user_id = data.get("user_id")

        if not group_message_id or not user_id:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")

        media_group_ids = [group_message_id + i for i in range(3)]
        for msg_id in media_group_ids:
            try:
                await message.bot.delete_message(chat_id=GROUP_ID, message_id=msg_id)
            except Exception as e:
                logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {str(e)}")

        try:
            await message.bot.delete_message(
                chat_id=GROUP_ID,
                message_id=storage[group_message_id]["button_message_id"]
            )
        except Exception as e:
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {str(e)}")

        user_state = FSMContext(
            storage=state.storage,
            key=StorageKey(chat_id=user_id, user_id=user_id, bot_id=message.bot.id)
        )
        await user_state.clear()

        await message.bot.send_message(
            chat_id=user_id,
            text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: {message.text}",
            reply_markup=kb.main
        )

        await message.answer("‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await message.answer("‚ùå –ù–µ —Ñ–ª—É–¥–∏! –º–µ—à–∞–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å")
        await state.clear()

@router.callback_query(F.data == "accept_registration")
async def accept_registration(callback: CallbackQuery, state: FSMContext):
    try:
        group_message_id = callback.message.reply_to_message.message_id

        if group_message_id not in storage:
            raise KeyError("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        data = storage[group_message_id]

        try:
            await callback.bot.delete_message(
                chat_id=GROUP_ID,
                message_id=data["button_message_id"]
            )
        except Exception as e:
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {str(e)}")

        await callback.bot.send_message(
            chat_id=data["user_id"],
            text="‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=kb.cancel_kb
        )

        await callback.bot.send_message(
            GROUP_ID,
            f"‚úÖ –ü—Ä–∏–Ω—è–ª: {callback.from_user.full_name}",
            reply_to_message_id=group_message_id
        )

        await callback.message.answer("üìù –í–≤–µ–¥–∏ GiD:")
        await state.set_state(Moderator1State.waiting_for_gid)
        await state.update_data(group_message_id=group_message_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}", exc_info=True)

@router.message(Reg.final_photo)
async def final_step(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        if data.get("final_photo_sent", False):
            await message.answer("‚è≥ –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
            return

        if message.content_type != ContentType.PHOTO:
            await message.answer("–Ω–µ –Ω—É–∂–Ω–æ —Ç–æ—Ä–æ–ø–∏—Ç—å—Å—è ;) .")
            return

        group_message_id = data.get("group_message_id")
        adres = data.get("adres")

        if not group_message_id or not adres:
            raise ValueError("ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –∞–¥—Ä–µ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        storage_data = storage.get(group_message_id)
        if not storage_data or not storage_data.get("is_accepted", False):
            await message.answer("‚è≥ –ó–∞—è–≤–∫–∞ –µ—â–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ! ")
            return

        photo_id = message.photo[-1].file_id
        user_name = message.from_user.full_name
        caption = f"–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç {user_name}\n–ê–¥—Ä–µ—Å: {adres}"
        if len(caption) > 1024:
            caption = caption[:1024]

        sent_message = await message.bot.send_photo(
            chat_id=GROUP_ID_3,
            photo=photo_id,
            caption=caption
        )

        accept_button = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_final:{sent_message.message_id}"),
            InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_final:{sent_message.message_id}")
        ]])

        await message.bot.send_message(
            chat_id=GROUP_ID_3,
            text=f"–ó–∞—è–≤–∫–∞ –æ—Ç {user_name} –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏:",
            reply_markup=accept_button,
            reply_to_message_id=sent_message.message_id
        )

        storage[sent_message.message_id] = {
            "user_id": message.from_user.id,
            "group_message_id": group_message_id,
            "is_accepted": True
        }

        await state.update_data(final_photo_sent=True, final_message_id=sent_message.message_id)
        await message.answer("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()

@router.callback_query(F.data.startswith("accept_final:"))
async def accept_final_photo(callback: CallbackQuery, state: FSMContext):
    try:
        final_message_id = int(callback.data.split(":")[1])

        storage_data = storage.get(final_message_id)
        if not storage_data:
            raise KeyError("–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        user_id = storage_data.get("user_id")
        if not user_id:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")

        await callback.bot.delete_message(
            chat_id=GROUP_ID_3,
            message_id=callback.message.message_id
        )

        await callback.bot.send_message(
            chat_id=user_id,
            text="üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            reply_markup=kb.main
        )

        user_state = FSMContext(
            storage=state.storage,
            key=StorageKey(chat_id=user_id, user_id=user_id, bot_id=callback.bot.id)
        )
        await user_state.clear()

        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞")
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏.")

@router.callback_query(F.data.startswith("reject_final:"))
async def reject_final_photo(callback: CallbackQuery, state: FSMContext):
    try:
        final_message_id = int(callback.data.split(":")[1])

        storage_data = storage.get(final_message_id)
        if not storage_data:
            raise KeyError("–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        user_id = storage_data.get("user_id")
        if not user_id:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")

        await callback.bot.delete_message(
            chat_id=GROUP_ID_3,
            message_id=callback.message.message_id
        )

        await state.set_state(Moderator2State.waiting_for_reject_reason)
        await state.update_data(final_message_id=final_message_id, user_id=user_id)

        await callback.message.answer("üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:")
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")

@router.message(F.chat.id == GROUP_ID_3, Moderator2State.waiting_for_reject_reason)
async def handle_reject_reason(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        final_message_id = data.get("final_message_id")
        user_id = data.get("user_id")

        if not final_message_id or not user_id:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")

        await message.bot.send_message(
            chat_id=user_id,
            text=f"‚ùå –í–∞—à–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: {message.text}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ.",
            reply_markup=kb.cancel_kb
        )

        user_state = FSMContext(
            storage=state.storage,
            key=StorageKey(chat_id=user_id, user_id=user_id, bot_id=message.bot.id)
        )
        await user_state.update_data(final_photo_sent=False)

        await message.answer("‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞.")
        await state.clear()

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state: FSMContext):
    try:
        current_state = await state.get_state()

        if not current_state:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            return

        if current_state == Reg.final_photo.state:
            data = await state.get_data()
            group_message_id = data.get("group_message_id")

            if group_message_id and storage.get(group_message_id, {}).get("is_accepted", False):
                await message.answer("‚ùå –ù–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ –æ—Ç–º–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞!")
                return

        await state.clear()
        await message.answer("‚ùé –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)
        logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {str(e)}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.callback_query(F.data == "no_connection")
async def handle_no_connection(callback: CallbackQuery):
    try:
        group_message_id = callback.message.reply_to_message.message_id
        if group_message_id not in storage:
            raise KeyError("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        user_id = storage[group_message_id]["user_id"]

        await callback.bot.send_message(
            chat_id=user_id,
            text="‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–≤—è–∑—å —Å —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–º. –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø—É RWB-TV –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
            reply_markup=kb.cancel_kb
        )

        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–≤—è–∑–∏")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data == "bad_connection")
async def handle_bad_connection(callback: CallbackQuery):
    try:
        group_message_id = callback.message.reply_to_message.message_id
        if group_message_id not in storage:
            raise KeyError("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        user_id = storage[group_message_id]["user_id"]

        await callback.bot.send_message(
            chat_id=user_id,
            text="‚ö†Ô∏è –°–≤—è–∑—å —Å —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–º –µ—Å—Ç—å, –ù–û –Ω–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —Ä–∞–∑—ä—ë–º RJ45, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç. –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ RWB-TV –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
            reply_markup=kb.cancel_kb
        )

        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø–ª–æ—Ö–æ–π —Å–≤—è–∑–∏")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.message()
async def other_messages(message: Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state:
        await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return

    if message.chat.id not in [GROUP_ID, GROUP_ID_2, GROUP_ID_3]:
        await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é", reply_markup=kb.main)


@router.callback_query(F.data == "ignore")
async def ignore_callback(callback: CallbackQuery):
    await callback.answer()